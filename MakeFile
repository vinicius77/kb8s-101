kubectl get pods

kubectl describe pod nginx
kubectl describe pod # -all ish
kubectl get pods -o wide

kubectl delete pod webapp

kubectl apply -f pod.yaml

## Creating pods without yaml file output commands in yaml format
kubectl run redis --image=redis --dry-run=client -o yaml > redis.yaml
kubectl apply -f redis.yaml

### Replication Controller
kubectl apply -f rc-definition.yaml
kubectl get replicationcontroller

## Replicaset
kubectl apply -f replicaset-definition.yaml
kubectl get replicaset
kubectl get pods

### Scalling

### Update the number of replicas on yaml file, for instance
kubectl replace -f replicaset-definition.yaml

# Those commands do scale but not update the yaml file
kubectl scale --replicas=4 -f replicaset-definition.yaml
kubectl scale --replicas=4 replicaset myapp-replicaset
kubectl edit replicaset myapp-replicaset ## Will open a temp file

kubectl delete replicaset <replica-set-name> ## Deletes all PODs as well

## Deployment
kubectl create deployment my-app-deployment --image=busybox --replicas=3
kubectl apply -f deployment-definition.yaml --record # records the command ran to create the deployment (change-cause)
kubectl get deployments
kubectl get all # replicasset , pods and deployments
kubectl set image deployment my-app-deployment <container_name>=busybox ## sets a new image

## Create and deploy with default settings
kubectl run nginx --image=nginx

## Rollout and Versioning (Deployment)
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kubectl rollout undo deployment/myapp-deployment ## Rollback

## Strategy (Deployment)
## Recreate
- Destroy all instances and create new instances at once (issue application down)
## Rollout Update (Default)
- Destroy and create new instances one at time

### Services
kubectl create -f service-nodeport-definition.yaml
kubectl get services

### Getting service url (minikube)
minikube service <service_name> --url

### Hosted Solutions GKE => Google Kubernetes Engine (Kb8s as a service)
# Services such NodePort are changed to LoadBalancer on GC (External LoadBalancer)

### Minukube setup (cluster on local machine)
## 1. install kubectl

## make sure virtualization is enabled
grep -E --color 'vmx|svm' /proc/cpuinfo

## install Hypervision (KVM ot VirtualBox) or using a Docker Container (not recommended)

## install minikube (it automatically creates a virtual machine from previous step)

### Ubuntu Server
### Steps to serve your service on local machine
### Get you remote server ip address
ip a | grep inet
 
# returns something like: 
# inet 192.168.63.3/24 metric 600 brd 192.168.63.255 scope global dynamic wlp2s0

## Port forward from remote server to local machine
kubectl port-forward --address 0.0.0.0 service/hello-minikube 8080:8080

## Access on local machine browser
http://192.168.63.3:8080/


#### Troubleshooting

# To solve: couldn't get current server API group list:

minikube delete
minikube start --driver=docker
kubectl get pods
